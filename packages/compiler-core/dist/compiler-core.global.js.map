{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { NodeTypes } from './ast'\n\nfunction createParserContext(template) {\n  return {\n    line: 1,\n    column: 1,\n    offset: 0,\n    source: template, // \u6B64\u5B57\u6BB5\u4F1A\u88AB\u4E0D\u505C\u7684\u8FDB\u884C\u89E3\u6790 slice\n    originalSource: template\n  }\n}\n\nfunction isEnd(context) {\n  const source = context.source\n  return !source // \u5982\u679C\u89E3\u6790\u5B8C\u6BD5\u540E\u4E3A\u7A7A\u5B57\u7B26\u4E32\u65F6\u8868\u793A\u89E3\u6790\u5B8C\u6BD5\n}\n\nfunction getCursor(context) {\n  let { line, column, offset } = context\n  return { line, column, offset }\n}\n\nfunction advancePositionWithMutation(context, source, endIndex) {\n  let linesCount = 0\n\n  let linePos = -1\n  for (let i = 0; i < endIndex; i++) {\n    if (source.charCodeAt(i) == 10) {\n      linesCount++\n      linePos = i\n    }\n  }\n  context.line += linesCount\n  context.offset += endIndex\n  context.column =\n    linePos == -1 ? context.column + endIndex : endIndex - linePos\n}\n\nfunction advanceBy(context, endIndex) {\n  // \u6BCF\u6B21\u5220\u6389\u5185\u5BB9\u7684\u65F6\u5019 \u90FD\u8981\u66F4\u65B0\u6700\u65B0\u7684\u884C\u5217\u548C\u504F\u79FB\u91CF\u4FE1\u606F\n  let source = context.source\n  advancePositionWithMutation(context, source, endIndex)\n  context.source = source.slice(endIndex)\n}\n\nfunction parseTextData(context, endIndex) {\n  const rawText = context.source.slice(0, endIndex)\n  advanceBy(context, endIndex)\n  return rawText\n}\n\nfunction getSelection(context, start, end?) {\n  end = end || getCursor(context)\n  return {\n    start,\n    end,\n    source: context.originalSource.slice(start.offset, end.offset)\n  }\n}\n\nfunction parseText(context) {\n  // \u5728\u89E3\u6790\u6587\u672C\u7684\u65F6\u5019 \u8981\u770B \u540E\u9762\u5230\u54EA\u91CC\u7ED3\u675F\n  let endTokens = ['<', '{{']\n  // as {{das<dsadsadda\n  let endIndex = context.source.length // \u9ED8\u8BA4\u8BA4\u4E3A\u5230\u6700\u540E\u7ED3\u675F\n  for (let i = 0; i < endTokens.length; i++) {\n    let index = context.source.indexOf(endTokens[i], 1)\n    // \u627E\u5230\u4E86 \u5E76\u4E14\u7B2C\u4E00\u6B21\u6BD4\u6574\u4E2A\u5B57\u7B26\u4E32\u5C0F\n    if (index !== -1 && endIndex > index) {\n      endIndex = index\n    }\n  }\n  // \u521B\u5EFA \u884C\u5217\u4FE1\u606F\n  const start = getCursor(context) // \u5F00\u59CB\n  // \u53D6\u5185\u5BB9\n  const content = parseTextData(context, endIndex)\n  return {\n    type: NodeTypes.TEXT,\n    content: content,\n    loc: getSelection(context, start)\n  }\n  // \u5728\u83B7\u53D6\u7ED3\u675F\u7684\u4F4D\u7F6E\n}\n\nfunction parse(template) {\n  // \u521B\u5EFA\u4E00\u4E2A\u89E3\u6790\u7684\u4E0A\u4E0B\u6587 \u6765\u8FDB\u884C\u5904\u7406\n  const context = createParserContext(template)\n  // `<`    \u5143\u7D20\n  // `{{}}` \u8BF4\u660E\u8868\u8FBE\u5F0F\n  // `\u5176\u4ED6`  \u5C31\u662F\u6587\u672C\n  const nodes = []\n  while (!isEnd(context)) {\n    const source = context.source\n    let node\n    if (source.startsWith('{{')) {\n      node = 'xxx'\n    } else if (source[0] === '<') {\n      // \u6807\u7B7E\n      node = 'qqq'\n    }\n\n    // \u6587\u672C\n    if (!node) {\n      node = parseText(context)\n    }\n\n    nodes.push(node)\n    console.log(nodes)\n    break\n  }\n}\n\nexport function compile(template) {\n  // \u5C06\u6A21\u677F\u8F6C\u6210\u62BD\u8C61\u8BED\u6CD5\u6811\n  const ast = parse(template) // \u8FD9\u91CC\u9700\u8981\u5C06html\u8BED\u6CD5\u8F6C\u6362\u6210js\u8BED\u6CD5  \u7F16\u8BD1\u539F\u7406\n  return ast\n\n  // TODO: transform(ast)\n  // TODO: generate(ast)\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAEA,+BAA6B,UAAU;AACrC,WAAO;AAAA,MACL,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,gBAAgB;AAAA,IAClB;AAAA,EACF;AAEA,iBAAe,SAAS;AACtB,UAAM,SAAS,QAAQ;AACvB,WAAO,CAAC;AAAA,EACV;AAEA,qBAAmB,SAAS;AAC1B,QAAI,EAAE,MAAM,QAAQ,WAAW;AAC/B,WAAO,EAAE,MAAM,QAAQ,OAAO;AAAA,EAChC;AAEA,uCAAqC,SAAS,QAAQ,UAAU;AAC9D,QAAI,aAAa;AAEjB,QAAI,UAAU;AACd,aAAS,IAAI,GAAG,IAAI,UAAU,KAAK;AACjC,UAAI,OAAO,WAAW,CAAC,KAAK,IAAI;AAC9B;AACA,kBAAU;AAAA,MACZ;AAAA,IACF;AACA,YAAQ,QAAQ;AAChB,YAAQ,UAAU;AAClB,YAAQ,SACN,WAAW,KAAK,QAAQ,SAAS,WAAW,WAAW;AAAA,EAC3D;AAEA,qBAAmB,SAAS,UAAU;AAEpC,QAAI,SAAS,QAAQ;AACrB,gCAA4B,SAAS,QAAQ,QAAQ;AACrD,YAAQ,SAAS,OAAO,MAAM,QAAQ;AAAA,EACxC;AAEA,yBAAuB,SAAS,UAAU;AACxC,UAAM,UAAU,QAAQ,OAAO,MAAM,GAAG,QAAQ;AAChD,cAAU,SAAS,QAAQ;AAC3B,WAAO;AAAA,EACT;AAEA,wBAAsB,SAAS,OAAO,KAAM;AAC1C,UAAM,OAAO,UAAU,OAAO;AAC9B,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,QAAQ,QAAQ,eAAe,MAAM,MAAM,QAAQ,IAAI,MAAM;AAAA,IAC/D;AAAA,EACF;AAEA,qBAAmB,SAAS;AAE1B,QAAI,YAAY,CAAC,KAAK,IAAI;AAE1B,QAAI,WAAW,QAAQ,OAAO;AAC9B,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACzC,UAAI,QAAQ,QAAQ,OAAO,QAAQ,UAAU,IAAI,CAAC;AAElD,UAAI,UAAU,MAAM,WAAW,OAAO;AACpC,mBAAW;AAAA,MACb;AAAA,IACF;AAEA,UAAM,QAAQ,UAAU,OAAO;AAE/B,UAAM,UAAU,cAAc,SAAS,QAAQ;AAC/C,WAAO;AAAA,MACL,MAAM;AAAA,MACN;AAAA,MACA,KAAK,aAAa,SAAS,KAAK;AAAA,IAClC;AAAA,EAEF;AAEA,iBAAe,UAAU;AAEvB,UAAM,UAAU,oBAAoB,QAAQ;AAI5C,UAAM,QAAQ,CAAC;AACf,WAAO,CAAC,MAAM,OAAO,GAAG;AACtB,YAAM,SAAS,QAAQ;AACvB,UAAI;AACJ,UAAI,OAAO,WAAW,IAAI,GAAG;AAC3B,eAAO;AAAA,MACT,WAAW,OAAO,OAAO,KAAK;AAE5B,eAAO;AAAA,MACT;AAGA,UAAI,CAAC,MAAM;AACT,eAAO,UAAU,OAAO;AAAA,MAC1B;AAEA,YAAM,KAAK,IAAI;AACf,cAAQ,IAAI,KAAK;AACjB;AAAA,IACF;AAAA,EACF;AAEO,mBAAiB,UAAU;AAEhC,UAAM,MAAM,MAAM,QAAQ;AAC1B,WAAO;AAAA,EAIT;",
  "names": []
}
